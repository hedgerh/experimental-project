{"version":3,"sources":["../../src/utils/dataURItoFile.js"],"names":["dataURI","opts","dataURItoBlob","toFile","data","split","mimeType","binary","atob","array","i","length","push","charCodeAt","File","Uint8Array","name","type","Blob"],"mappings":";;;;;;kBA0Be,UAAUA,OAAV,EAAmBC,IAAnB,EAAyB;AACtC,SAAOC,cAAcF,OAAd,EAAuBC,IAAvB,EAA6B,IAA7B,CAAP;AACD,C;;AA5BD,SAASC,aAAT,CAAwBF,OAAxB,EAAiCC,IAAjC,EAAuCE,MAAvC,EAA+C;AAC7C;AACA,MAAIC,OAAOJ,QAAQK,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAX;;AAEA;AACA,MAAIC,WAAWL,KAAKK,QAAL,IAAiBN,QAAQK,KAAR,CAAc,GAAd,EAAmB,CAAnB,EAAsBA,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,EAAoCA,KAApC,CAA0C,GAA1C,EAA+C,CAA/C,CAAhC;;AAEA;AACA,MAAIC,YAAY,IAAhB,EAAsB;AACpBA,eAAW,YAAX;AACD;;AAED,MAAIC,SAASC,KAAKJ,IAAL,CAAb;AACA,MAAIK,QAAQ,EAAZ;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,OAAOI,MAA3B,EAAmCD,GAAnC,EAAwC;AACtCD,UAAMG,IAAN,CAAWL,OAAOM,UAAP,CAAkBH,CAAlB,CAAX;AACD;;AAED;AACA,MAAIP,MAAJ,EAAY;AACV,WAAO,IAAIW,IAAJ,CAAS,CAAC,IAAIC,UAAJ,CAAeN,KAAf,CAAD,CAAT,EAAkCR,KAAKe,IAAL,IAAa,EAA/C,EAAmD,EAACC,MAAMX,QAAP,EAAnD,CAAP;AACD;;AAED,SAAO,IAAIY,IAAJ,CAAS,CAAC,IAAIH,UAAJ,CAAeN,KAAf,CAAD,CAAT,EAAkC,EAACQ,MAAMX,QAAP,EAAlC,CAAP;AACD","file":"dataURItoFile.js","sourcesContent":["function dataURItoBlob (dataURI, opts, toFile) {\n  // get the base64 data\n  var data = dataURI.split(',')[1]\n\n  // user may provide mime type, if not get it from data URI\n  var mimeType = opts.mimeType || dataURI.split(',')[0].split(':')[1].split(';')[0]\n\n  // default to plain/text if data URI has no mimeType\n  if (mimeType == null) {\n    mimeType = 'plain/text'\n  }\n\n  var binary = atob(data)\n  var array = []\n  for (var i = 0; i < binary.length; i++) {\n    array.push(binary.charCodeAt(i))\n  }\n\n  // Convert to a File?\n  if (toFile) {\n    return new File([new Uint8Array(array)], opts.name || '', {type: mimeType})\n  }\n\n  return new Blob([new Uint8Array(array)], {type: mimeType})\n}\n\nexport default function (dataURI, opts) {\n  return dataURItoBlob(dataURI, opts, true)\n}"]}