{"version":3,"sources":["../../src/plugins/Tus10.js"],"names":["Tus10","opts","defaultOptions","resume","allowPause","Object","assign","files","total","length","uploaders","map","file","index","current","parseInt","isRemote","uploadRemote","upload","Promise","all","then","uploadedCount","resolve","reject","Upload","data","metadata","meta","endpoint","onError","err","onProgress","bytesUploaded","bytesTotal","console","log","emit","uploader","id","onSuccess","url","on","fileID","abort","start","remoteHost","remote","host","fetch","provider","method","credentials","headers","body","JSON","stringify","target","protocol","res","status","statusText","json","regex","exec","token","socket","progressData","progress","close","pause"],"mappings":"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","file":"Tus10.js","sourcesContent":["'use strict'\n\nimport tus from 'tus-js-client'\nimport UppySocket from '../utils/UppySocket'\nimport EventEmitter from 'events'\n\n/**\n * Tus resumable file uploader\n */\nexport default class Tus10 extends EventEmitter {\n  constructor (opts) {\n    super()\n\n    // set default options\n    const defaultOptions = {\n      resume: true,\n      allowPause: true\n    }\n\n    // merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n  }\n\n/**\n * Start uploading for batch of files.\n * @param  {Array} files Files to upload\n * @return {Promise}       Resolves when all uploads succeed/fail\n */\n  start (files) {\n    const total = files.length\n\n    const uploaders = files.map((file, index) => {\n      const current = parseInt(index, 10) + 1\n\n      if (file.isRemote) {\n        return this.uploadRemote(file, current, total)\n      }\n\n      return this.upload(file, current, total)\n    })\n\n    return Promise.all(uploaders).then(() => {\n      return {\n        uploadedCount: files.length\n      }\n    })\n  }\n\n/**\n * Create a new Tus upload\n *\n * @param {object} file for use with upload\n * @param {integer} current file in a queue\n * @param {integer} total number of files in a queue\n * @returns {Promise}\n */\n  upload (file, current, total) {\n    // Create a new tus upload\n    return new Promise((resolve, reject) => {\n      const upload = new tus.Upload(file.data, {\n\n        // TODO merge this.opts or this.opts.tus here\n        metadata: file.meta,\n        resume: this.opts.resume,\n        endpoint: this.opts.endpoint,\n\n        onError: (err) => {\n          reject('Failed because: ' + err)\n        },\n        onProgress: (bytesUploaded, bytesTotal) => {\n          console.log('progress:')\n          console.log(bytesUploaded / bytesTotal)\n          // Dispatch progress event\n          this.emit('progress', {\n            uploader: this,\n            id: file.id,\n            bytesUploaded: bytesUploaded,\n            bytesTotal: bytesTotal\n          })\n        },\n        onSuccess: () => {\n          console.log('success!')\n          this.emit('success', file.id, upload.url)\n          resolve(upload)\n        }\n      })\n\n      this.on('abort', (fileID) => {\n        // If no fileID provided, abort all uploads\n        if (fileID === file.id || !fileID) {\n          console.log('aborting file upload: ', fileID)\n          upload.abort()\n          resolve(`upload ${fileID} was aborted`)\n        }\n      })\n\n      this.on('pause', (fileID) => {\n        // If no fileID provided, pause all uploads\n        if (fileID === file.id || !fileID) {\n          upload.abort()\n        }\n      })\n\n      this.on('resume', (fileID) => {\n        // If no fileID provided, resume all uploads\n        if (fileID === file.id || !fileID) {\n          upload.start()\n        }\n      })\n\n      upload.start()\n      this.emit('file-upload-started', file.id, upload)\n    })\n  }\n\n  uploadRemote (file, current, total) {\n    return new Promise((resolve, reject) => {\n      const remoteHost = this.opts.remoteHost ? this.opts.remoteHost : file.remote.host\n      fetch(`${remoteHost}/${file.remote.provider}/get`, {\n        method: 'post',\n        credentials: 'include',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(Object.assign({}, file.remote.body, {\n          target: this.opts.endpoint,\n          protocol: 'tus'\n        }))\n      })\n      .then((res) => {\n        if (res.status < 200 && res.status > 300) {\n          return reject(res.statusText)\n        }\n\n        res.json()\n        .then((data) => {\n          // get the host domain\n          var regex = /^(?:https?:\\/\\/)?(?:[^@\\/\\n]+@)?(?:www\\.)?([^:\\/\\n]+)/\n          var host = regex.exec(remoteHost)[1]\n\n          var token = data.token\n          var socket = new UppySocket({\n            target: `ws://${host}:3020/api/${token}`\n          })\n\n          socket.on('progress', (progressData) => {\n            const {progress, bytesUploaded, bytesTotal} = progressData\n\n            if (progress) {\n              console.log(progress)\n              // Dispatch progress event\n              this.emit('progress', {\n                uploader: this,\n                id: file.id,\n                bytesUploaded: bytesUploaded,\n                bytesTotal: bytesTotal\n              })\n\n              if (progress === '100.00') {\n                socket.close()\n                return resolve()\n              }\n            }\n          })\n        })\n      })\n    })\n  }\n\n  abort (fileID) {\n    this.emit('abort', fileID)\n  }\n\n  pause (fileID) {\n    this.emit('pause', fileID)\n  }\n\n  resume (fileID) {\n    this.emit('resume', fileID)\n  }\n\n  abortAll () {\n    this.abort()\n  }\n\n  pauseAll () {\n    this.pause()\n  }\n\n  resumeAll () {\n    this.resume()\n  }\n}\n"]}