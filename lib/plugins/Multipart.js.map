{"version":3,"sources":["../../src/plugins/Multipart.js"],"names":["Multipart","core","opts","defaultOptions","fieldName","responseUrlFieldName","bundle","Object","assign","file","current","total","log","Promise","resolve","reject","formPost","FormData","append","data","keys","meta","forEach","item","console","xhr","XMLHttpRequest","upload","addEventListener","ev","lengthComputable","emit","uploader","id","bytesUploaded","loaded","bytesTotal","target","status","resp","JSON","parse","response","uploadURL","name","open","endpoint","send","files","filesForUpload","progress","percentage","push","uploaders","i","parseInt","length","all","then","result"],"mappings":"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","file":"Multipart.js","sourcesContent":["'use strict'\n\nimport EventEmitter from 'events'\n\nexport default class Multipart extends EventEmitter {\n  constructor (core, opts) {\n    super()\n\n    // Default options\n    const defaultOptions = {\n      fieldName: 'files[]',\n      responseUrlFieldName: 'url',\n      bundle: true\n    }\n\n    // Merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n  }\n\n  upload (file, current, total) {\n    this.core.log(`uploading ${current} of ${total}`)\n    return new Promise((resolve, reject) => {\n      // turn file into an array so we can use bundle\n      // if (!this.opts.bundle) {\n      //   files = [files[current]]\n      // }\n\n      // for (let i in files) {\n      //   formPost.append(this.opts.fieldName, files[i])\n      // }\n\n      const formPost = new FormData()\n      formPost.append(this.opts.fieldName, file.data)\n\n      Object.keys(file.meta).forEach((item) => {\n        console.log(file.meta, file.meta[item])\n        formPost.append(file.meta, file.meta[item])\n      })\n\n      const xhr = new XMLHttpRequest()\n\n      xhr.upload.addEventListener('progress', (ev) => {\n        if (ev.lengthComputable) {\n          // Dispatch progress event\n          this.emit('upload-progress', {\n            uploader: this,\n            id: file.id,\n            bytesUploaded: ev.loaded,\n            bytesTotal: ev.total\n          })\n        }\n      })\n\n      xhr.addEventListener('load', (ev) => {\n        if (ev.target.status === 200) {\n          const resp = JSON.parse(xhr.response)\n          const uploadURL = resp[this.opts.responseUrlFieldName]\n\n          this.emit('upload-success', file.id, uploadURL)\n\n          this.core.log(`Download ${file.name} from ${file.uploadURL}`)\n          return resolve(file)\n        }\n\n        // var upload = {}\n        //\n        // if (this.opts.bundle) {\n        //   upload = {files: files}\n        // } else {\n        //   upload = {file: files[current]}\n        // }\n      })\n\n      xhr.addEventListener('error', (ev) => {\n        return reject('Upload error')\n      })\n\n      xhr.open('POST', this.opts.endpoint, true)\n      xhr.send(formPost)\n      this.emit('core:file-upload-started', file.id)\n    })\n  }\n\n  selectForUpload (files) {\n    const filesForUpload = []\n    Object.keys(files).forEach((file) => {\n      if (files[file].progress.percentage === 0) {\n        filesForUpload.push(files[file])\n      }\n    })\n\n    const uploaders = []\n    filesForUpload.forEach((file, i) => {\n      const current = parseInt(i, 10) + 1\n      const total = filesForUpload.length\n      uploaders.push(this.upload(file, current, total))\n    })\n\n    return Promise.all(uploaders).then((result) => {\n      this.core.log('Multipart has finished uploading!')\n    })\n\n    //   if (this.opts.bundle) {\n    //     uploaders.push(this.upload(files, 0, files.length))\n    //   } else {\n    //     for (let i in files) {\n    //       uploaders.push(this.upload(files, i, files.length))\n    //     }\n    //   }\n  }\n}\n"]}